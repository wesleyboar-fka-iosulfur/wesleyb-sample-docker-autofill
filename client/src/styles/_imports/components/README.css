/*
Components

Components are finite, discrete, implementation-specific parts of an interface. Most people (users, designers, developers, stakeholders) would be able to identify them.

Reference:

- [BEM with Namespaces: Component Namespaces](https://csswizardry.com/2015/03/more-transparent-ui-code-with-namespaces/#component-namespaces-c-)

Guidelines:

- Components are implementation-specific bits of UI.
- They are quite safe to modify.
- Anything with a leading c- is a specific thing.

Rules:

- One element may be styled by many components.
- One element may be styled by many modifiers of one component.

Weight: 6

Styleguide Core.Components
*/

/*
Atoms

"Atom" components are the small-scale indivisible components of an interface. Atoms combine to form "molecule" components.

Reference:

- [Atomic Design: Atoms](http://bradfrost.com/blog/post/atomic-web-design/#atoms)

Rules:

- One atom may not contain other atoms.
- Many atoms may be combined to form molecules.

Styleguide Core.Components.Atoms
*/

/*
Molecules

"Molecule" components are groups of "atom" components. Molecules combine to form "organism" components.

Reference:

- [Atomic Design: Molecules](http://bradfrost.com/blog/post/atomic-web-design/#molecules)

Rules:

- One molecule may contain many atoms.
- Many molecules may be combined to form organisms.

Styleguide Core.Components.Molecules
*/

/*
Organisms

"Organism" components are groups of "molecule" components. Organisms are the large-scale combinable components of an interface.

Reference:

- [Atomic Design: Organisms](http://bradfrost.com/blog/post/atomic-web-design/#organisms)

Rules:

- One organism may contain many molecules.
- Many organisms may be combined to form organisms.

Styleguide Core.Components.Organisms
*/

/* DO NOT ADD STYLES HERE; ADD THEM INSIDE STYLESHEETS IN THIS DIRECTORY */
